package org.lanqiao.algo.lanqiaobei._01enumerative;

/**
 * 魔方可以对它的6个面自由旋转。


 我们来操作一个2阶魔方（如图1所示）：
 为了描述方便，我们为它建立了坐标系。

 各个面的初始状态如下：
 x轴正向：绿
 x轴反向：蓝
 y轴正向：红
 y轴反向：橙
 z轴正向：白
 z轴反向：黄

 假设我们规定，只能对该魔方进行3种操作。分别标记为：
 x 表示在x轴正向做顺时针旋转
 y 表示在y轴正向做顺时针旋转
 z 表示在z轴正向做顺时针旋转

 xyz 则表示顺序执行x,y,z 3个操作

 题目的要求是：
 从标准输入获得一个串，表示操作序列。
 程序输出：距离我们最近的那个小方块的3个面的颜色。
 顺序是：x面，y面，z面。

 例如：在初始状态，应该输出：
 绿红白

 初始状态下，如果用户输入：
 x
 则应该输出：
 绿白橙

 初始状态下，如果用户输入：
 zyx
 则应该输出：
 红白绿

 请编程实现所述功能。
 */
public class dati_05二阶魔方 {
  public static void main(String[] args) {
    String[][] c = {
        {"绿", "绿", "绿", "绿"},
        {"蓝", "蓝", "蓝", "蓝"},
        {"红", "红", "红", "红"},
        {"橙", "橙", "橙", "橙"},
        {"白", "白", "白", "白"},
        {"黄", "黄", "黄", "黄"}
    };
    String ops = "x";
    for (String op : ops.split("")) {
      switch (op) {
        case "x":
          String c30 = c[3][0];
          String c33 = c[3][3];
          c[3][0] = c[5][3];
          c[3][3] = c[5][2];
          c[5][3] = c[2][3];
          c[5][2] = c[2][0];
          c[2][3] = c[4][2];
          c[2][0] = c[4][3];
          c[4][2] = c30;
          c[4][3] = c33;
          String c01_x = c[0][1];
          c[0][1] = c[0][0];
          c[0][0] = c[0][3];
          c[0][3] = c[0][2];
          c[0][2] = c01_x;
          break;
        case "y":
          String c01 = c[0][1];
          String c02 = c[0][2];
          c[0][1] = c[5][2];
          c[0][2] = c[5][1];
          c[5][2] = c[1][2];
          c[5][1] = c[1][1];
          c[1][2] = c[4][1];
          c[1][1] = c[4][2];
          c[4][1] = c01;
          c[4][2] = c02;

          String c21_y = c[2][1];
          c[2][1] = c[2][0];
          c[2][0] = c[2][3];
          c[2][3] = c[2][2];
          c[2][2] = c21_y;

          break;
        case "z":
          String c00 = c[0][0];
          String _c01 = c[0][1];
          c[0][0] = c[2][0];
          c[0][1] = c[2][1];
          c[2][0] = c[1][1];
          c[2][1] = c[1][0];
          c[1][1] = c[3][1];
          c[1][0] = c[3][0];
          c[3][1] = c00;
          c[3][0] = _c01;

          String c41_z = c[4][1];
          c[4][1] = c[4][0];
          c[4][0] = c[4][3];
          c[4][3] = c[4][2];
          c[4][2] = c41_z;

          break;
      }
    }
    System.out.println(c[0][1] + c[2][0] + c[4][2]);
  }
}
